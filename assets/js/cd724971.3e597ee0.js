"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[6118],{4137:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>g});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,g=d["".concat(i,".").concat(u)]||d[u]||m[u]||s;return n?t.createElement(g,l(l({ref:a},c),{},{components:n})):t.createElement(g,l({ref:a},c))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var s=n.length,l=new Array(s);l[0]=u;var r={};for(var i in a)hasOwnProperty.call(a,i)&&(r[i]=a[i]);r.originalType=e,r[d]="string"==typeof e?e:o,l[1]=r;for(var p=2;p<s;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},31:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var t=n(7462),o=(n(7294),n(4137));const s={sidebar_label:"Helpful CLI commands",description:"Some of the most helpful Celestia App CLI commands."},l="Helpful CLI commands",r={unversionedId:"nodes/celestia-app-commands",id:"nodes/celestia-app-commands",title:"Helpful CLI commands",description:"Some of the most helpful Celestia App CLI commands.",source:"@site/docs/nodes/celestia-app-commands.md",sourceDirName:"nodes",slug:"/nodes/celestia-app-commands",permalink:"/nodes/celestia-app-commands",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/celestia-app-commands.md",tags:[],version:"current",frontMatter:{sidebar_label:"Helpful CLI commands",description:"Some of the most helpful Celestia App CLI commands."},sidebar:"nodes",previous:{title:"Create a Celestia testnet",permalink:"/nodes/instantiate-testnet"},next:{title:"SystemD",permalink:"/nodes/systemd"}},i={},p=[{value:"Creating a wallet",id:"creating-a-wallet",level:2},{value:"Key management",id:"key-management",level:2},{value:"Importing and exporting keys",id:"importing-and-exporting-keys",level:3},{value:"Querying subcommands",id:"querying-subcommands",level:2},{value:"Token management",id:"token-management",level:2},{value:"Governance",id:"governance",level:2},{value:"Community Pool",id:"community-pool",level:3},{value:"Claim validator rewards",id:"claim-validator-rewards",level:2},{value:"Delegate &amp; undelegate tokens",id:"delegate--undelegate-tokens",level:2},{value:"Unjailing the validator",id:"unjailing-the-validator",level:2},{value:"How to export logs with SystemD",id:"how-to-export-logs-with-systemd",level:2},{value:"Signing genesis for a new network",id:"signing-genesis-for-a-new-network",level:2}],c={toc:p},d="wrapper";function m(e){let{components:a,...n}=e;return(0,o.kt)(d,(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"helpful-cli-commands"},"Helpful CLI commands"),(0,o.kt)("p",null,"View all options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ celestia-appd --help\nStart celestia-app\n\nUsage:\n  celestia-appd [command]\n\nAvailable Commands:\n  add-genesis-account Add a genesis account to genesis.json\n  collect-gentxs      Collect genesis txs and output a genesis.json file\n  config              Create or query an application CLI configuration file\n  debug               Tool for helping with debugging your application\n  export              Export state to JSON\n  gentx               Generate a genesis tx carrying a self delegation\n  help                Help about any command\n  init                Initialize private validator, p2p, genesis,\n  and application configuration files\n  keys                Manage your application's keys\n  migrate             Migrate genesis to a specified target version\n  query               Querying subcommands\n  rollback            rollback tendermint state by one height\n  rollback            rollback cosmos-sdk and tendermint state by one height\n  start               Run the full node\n  status              Query remote node for status\n  tendermint          Tendermint subcommands\n  tx                  Transactions subcommands\n  validate-genesis    validates the genesis file at the default\n  location or at the location passed as an arg\n  version             Print the application binary version information\n")),(0,o.kt)("h2",{id:"creating-a-wallet"},"Creating a wallet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd config keyring-backend test\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"keyring-backend")," configures the keyring's backend, where the keys are stored."),(0,o.kt)("p",null,"Options are: ",(0,o.kt)("inlineCode",{parentName:"p"},"os|file|kwallet|pass|test|memory"),"."),(0,o.kt)("p",null,"You can learn more on the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/main/run-node/keyring.html"},"Cosmos documentation"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/cosmos/cosmos-sdk/crypto/keyring"},"Go Package documentation"),"."),(0,o.kt)("h2",{id:"key-management"},"Key management"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# listing keys\ncelestia-appd keys list\n\n# adding keys\ncelestia-appd keys add <KEY_NAME>\n\n# deleting keys\ncelestia-appd keys delete <KEY_NAME>\n\n# renaming keys\ncelestia-appd keys rename <CURRENT_KEY_NAME> <NEW_KEY_NAME>\n")),(0,o.kt)("h3",{id:"importing-and-exporting-keys"},"Importing and exporting keys"),(0,o.kt)("p",null,"Import an encrypted and ASCII-armored private key into the local keybase."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd keys import <KEY_NAME> <KEY_FILE>\n")),(0,o.kt)("p",null,"Example usage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd keys import amanda ./keyfile.txt\n")),(0,o.kt)("p",null,"Export a private key from the local keyring in encrypted and ASCII-armored format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd keys export <KEY_NAME>\n\n# you will then be prompted to set a password for the encrypted private key:\nEnter passphrase to encrypt the exported key:\n")),(0,o.kt)("p",null,"After you set a password, your encrypted key will be displayed."),(0,o.kt)("h2",{id:"querying-subcommands"},"Querying subcommands"),(0,o.kt)("p",null,"Usage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd query <FLAGS> | <COMMAND>\n\n# alias q\ncelestia-appd q <FLAGS> | <COMMAND>\n")),(0,o.kt)("p",null,"To see all options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd q --help\n")),(0,o.kt)("h2",{id:"token-management"},"Token management"),(0,o.kt)("p",null,"Get token balances:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd q bank balances <ADDRESS> --node <NODE_URI>\n")),(0,o.kt)("p",null,"Example usage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd q bank balances celestia1czpgn3hdh9sodm06d5qk23xzgpq2uyc8ggdqgw \\\n--node https://rpc-mocha.pops.one\n")),(0,o.kt)("p",null,"Transfer tokens from one wallet to another:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx bank send <FROM_ADDRESS> <TO_ADDRESS> \\\n<amount> --node <NODE_URI> --chain-id <CHAIN_ID>\n")),(0,o.kt)("p",null,"Example usage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx bank send <FROM_ADDRESS> <TO_ADDRESS> \\\n19000000utia --node https://rpc-mocha.pops.one/ --chain-id mocha\n")),(0,o.kt)("p",null,"To see options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx bank send --help\n")),(0,o.kt)("h2",{id:"governance"},"Governance"),(0,o.kt)("p",null,"Governance proposals on Celestia are limited as there are no text proposals,\nupgrades occur via social consensus, and some only params are not modifiable.\nHowever, one can submit governance proposals to change certain parameters and\nspend community funds. More detailed information on this topic can be found in\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/v0.46/modules/gov/01_concepts.html#proposal-submission"},"cosmos-sdk documentation for submitting\nproposals"),",\nthe list of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/celestia-app/blob/0012451c4dc118767dd59bc8d341878b7a7cacdf/specs/src/specs/params.md"},"parameters defaults in the\nspecs"),",\nand the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/celestia-app/blob/main/x/paramfilter/README.md"},"x/paramfilter module\nspecs"),"."),(0,o.kt)("p",null,"Viewing the available proposals can be done with the query command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd q gov proposals \n")),(0,o.kt)("p",null,'There are four options when voting "yes", "no", "no_with_veto" and "abstain".\nThe "no_with_veto" vote is different from the "no" vote in that the submitter of\nthe proposer\'s deposit will get burned, and a minority of stake (1/3) can stop a\nproposal that might otherwise pass quorum. You can use those options to vote on\na governance proposal with the following command:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx gov vote <proposal id> <option> --from <wallet> --chain-id <chain-id>\n")),(0,o.kt)("p",null,"To submit a proposal, there are two commands that can be used. The first is the\nlegacy command, which is the reccomended way to submit a proposal."),(0,o.kt)("p",null,"To change the max validators to 105, one would first save this JSON file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Staking Param Change",\n  "description": "Update max validators",\n  "changes": [\n    {\n      "subspace": "staking",\n      "key": "MaxValidators",\n      "value": 105\n    }\n  ],\n  "deposit": "1000000000utia"\n}\n')),(0,o.kt)("p",null,"Then you can submit the proposal with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx gov submit-legacy-proposal parameter-change <path to json file> --from <wallet> --chain-id <chain-id>\n")),(0,o.kt)("p",null,"If we want to use the newer api, we can submit a proposal by first saving the\n",(0,o.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," proposal in the json encoded format to a json."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "messages": [\n        {"@type":"/cosmos.gov.v1beta1.MsgSubmitProposal",\n        "content":{\n            "@type":"/cosmos.params.v1beta1.ParameterChangeProposal",\n            "title":"title",\n            "description":"description",\n            "changes":[{"subspace":"staking","key":"MaxValidators","value":"103"}]\n            },\n            "initial_deposit":[{"denom":"utia","amount":"1000000000"}],\n            "proposer":"celestia10d07y265gmmuvt4z0w9aw880jnsr700jtgz4v7"\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"Note that the proposer here must be the gov module\naccount. That account can be found by using this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd q auth module-account gov\n")),(0,o.kt)("p",null,"Then one can submit the proposal with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx gov submit-proposal <path to json file> --from <wallet> --chain-id <chain-id>\n")),(0,o.kt)("h3",{id:"community-pool"},"Community Pool"),(0,o.kt)("p",null,"A percentage the block rewards are allocated to the community pool. Community\nmembers can submit governance proposals to spend the community pool funds, and\ntoken holders can vote on these proposals. The proposals to spend are arbitrary\nin nature in that they can only contain text and some address to send funds to.\nTo view the community pool balance, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd q distribution community-pool\n")),(0,o.kt)("p",null,"To submit a proposal to spend the community pool funds, first create a JSON file\nthat contains the proposal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Community Pool Spend",\n  "description": "Fund an open source project.",\n  "recipient": "celestia17adsjkuecgjheugrdrwdqv9uh3qkrfmj9xzawx",\n  "amount": "100000000000utia",\n  "deposit": "1000000000utia"\n}\n')),(0,o.kt)("p",null,"The the json file can be submitted using a similar proposal submission command as above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx gov submit-legacy-proposal community-pool-spend <path to json file> --from <wallet>\n")),(0,o.kt)("h2",{id:"claim-validator-rewards"},"Claim validator rewards"),(0,o.kt)("p",null,"You can claim your validator rewards with\nthe following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx distribution withdraw-rewards <validator valoper>\\\n    --commission --from=<validator wallet> --chain-id <chain-id> --gas auto -y\n")),(0,o.kt)("h2",{id:"delegate--undelegate-tokens"},"Delegate & undelegate tokens"),(0,o.kt)("p",null,"You can ",(0,o.kt)("inlineCode",{parentName:"p"},"delegate")," your tokens to a validator\nwith the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx staking delegate <validator valoper> <amount>\\\n    --from <wallet> --chain-id <chain-id>\n")),(0,o.kt)("p",null,"You can undelegate tokens to a validator\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"unbond")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx staking unbond <validator valoper> <amount>\\\n    --from <wallet> --chain-id <chain-id>\n")),(0,o.kt)("h2",{id:"unjailing-the-validator"},"Unjailing the validator"),(0,o.kt)("p",null,"You can unjail your validator with the\nfollowing command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tx slashing unjail --from <validator wallet>\\\n    --chain-id <chain-id> --gas auto -y\n")),(0,o.kt)("h2",{id:"how-to-export-logs-with-systemd"},"How to export logs with SystemD"),(0,o.kt)("p",null,"You can export your logs if you are running\na SystemD service with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"sudo journalctl -u <your systemd service> -S yesterday > node_logs.txt\nsudo journalctl -u <your systemd service> -S today > node_logs.txt\n# This command outputs the last 1 million lines!\nsudo journalctl -u <your systemd service> -n 1000000 > node_logs.txt\n")),(0,o.kt)("h2",{id:"signing-genesis-for-a-new-network"},"Signing genesis for a new network"),(0,o.kt)("p",null,"You can first run the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"VALIDATOR_NAME=validator1\nCHAIN_ID=testnet\ncelestia-appd init $VALIDATOR_NAME --chain-id $CHAIN_ID\nMONIKER=validator_name\n")),(0,o.kt)("p",null,"Next create a wallet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"KEY_NAME=validator\ncelestia-appd keys add $KEY_NAME\n")),(0,o.kt)("p",null,"Create or assign an EVM address:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"EVM_ADDRESS=<EVM_ADDRESS>\n")),(0,o.kt)("p",null,"Then add genesis account:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'CELES_AMOUNT="5000100000000utia"\ncelestia-appd add-genesis-account $KEY_NAME $CELES_AMOUNT\n')),(0,o.kt)("p",null,"Then generate your gentx:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"STAKING_AMOUNT=5000000000000utia\ncelestia-appd gentx $KEY_NAME $STAKING_AMOUNT --chain-id $CHAIN_ID \\\n    --pubkey=$(celestia-appd tendermint show-validator) \\\n    --moniker=$MONIKER \\\n    --commission-rate=0.1 \\\n    --commission-max-rate=0.2 \\\n    --commission-max-change-rate=0.01 \\\n    --min-self-delegation=1 \\\n    --evm-address=$EVM_ADDRESS \\\n")),(0,o.kt)("p",null,"You can then share your gentx JSON file on the networks\nrepo ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celestiaorg/networks"},"here")," in the respective\nnetwork directory you are participating in."))}m.isMDXComponent=!0}}]);