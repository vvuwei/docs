"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[5589],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6213:(e,t,n)=>{n.d(t,{Z:()=>a});const a=Object.freeze({golangNodeBSR:"1.21.1",golangNodeMocha:"1.21.1",golangNodeArabica:"1.21.1",golangApp:"1.21.1",golangCore:"1.21.1",golang:"1.21.1",arabicaChainId:"arabica-10",bsrChainId:"blockspacerace-0",mochaChainId:"mocha-4",arabicaRollkitVersion:"v0.10.2",mochaRollkitVersion:"v0.10.2",bsrRollkitVersion:"v0.8.1",localCelestiaDevnetVersion:"v0.8.2",golangQGB:"1.20.2",orchrelayVersion:"v0.2.0-app-v0.13.2-beta"})},425:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},3992:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),o=n(6010),l=n(2957),i=n(6550),s=n(5238),u=n(3609),c=n(2560);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=m({queryString:n,groupId:a}),[p,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=s??p;return h({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),k(e)}),[u,k,o]),tabValues:o}}var f=n(1048);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(p(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:h,onClick:d},l,{className:(0,o.Z)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>k,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(4137)),o=n(6213),l=n(3992),i=n(425);const s={sidebar_label:"Full consensus node",description:"Learn how to set up a Celestia full consensus node."},u="Setting up a Celestia full consensus node",c={unversionedId:"nodes/full-consensus-node",id:"nodes/full-consensus-node",title:"Setting up a Celestia full consensus node",description:"Learn how to set up a Celestia full consensus node.",source:"@site/docs/nodes/full-consensus-node.mdx",sourceDirName:"nodes",slug:"/nodes/full-consensus-node",permalink:"/nodes/full-consensus-node",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/full-consensus-node.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Full consensus node",description:"Learn how to set up a Celestia full consensus node."},sidebar:"nodes",previous:{title:"Validator node",permalink:"/nodes/validator-node"},next:{title:"IBC Relayer",permalink:"/nodes/ibc-relayer"}},p={},d=[{value:"Hardware requirements",id:"hardware-requirements",level:2},{value:"Setting up a full consensus node",id:"setting-up-a-full-consensus-node",level:2},{value:"Setup the dependencies",id:"setup-the-dependencies",level:3},{value:"Install celestia-app",id:"install-celestia-app",level:3},{value:"Setup the P2P networks",id:"setup-the-p2p-networks",level:3},{value:"Configure pruning",id:"configure-pruning",level:3},{value:"Reset network",id:"reset-network",level:3},{value:"Syncing",id:"syncing",level:3},{value:"State sync",id:"state-sync",level:4},{value:"Quick sync",id:"quick-sync",level:4},{value:"Start the celestia-app",id:"start-the-celestia-app",level:3},{value:"Optional: configure for RPC endpoint",id:"optional-configure-for-rpc-endpoint",level:3},{value:"Transaction indexer configuration options",id:"transaction-indexer-configuration-options",level:2}],h={toc:d},m="wrapper";function k(e){let{components:t,...s}=e;return(0,r.kt)(m,(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-a-celestia-full-consensus-node"},"Setting up a Celestia full consensus node"),(0,r.kt)("p",null,"Full Consensus Nodes allow you to sync blockchain history in the Celestia\nConsensus Layer."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"full consensus node",src:n(7115).Z,width:"2500",height:"3134"})),(0,r.kt)("h2",{id:"hardware-requirements"},"Hardware requirements"),(0,r.kt)("p",null,"The following hardware minimum requirements are recommended for running the\nFull Consensus Nodes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Memory: ",(0,r.kt)("strong",{parentName:"li"},"8 GB RAM")),(0,r.kt)("li",{parentName:"ul"},"CPU: ",(0,r.kt)("strong",{parentName:"li"},"Quad-Core")),(0,r.kt)("li",{parentName:"ul"},"Disk: ",(0,r.kt)("strong",{parentName:"li"},"250 GB SSD Storage")),(0,r.kt)("li",{parentName:"ul"},"Bandwidth: ",(0,r.kt)("strong",{parentName:"li"},"1 Gbps for Download/1 Gbps for Upload"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": Running a full consensus node requires significant storage capacity to store the entire blockchain history. As of the latest recommendation, it is advisable to have at least 250 GB of SSD storage for a Celestia full consensus node if you are using pruning. If you are not using pruning, you are running an archive node, and it is recommended to have 500 GB of SSD storage. Please ensure that your storage meets this requirement to ensure smooth syncing and operation of the node."),(0,r.kt)("h2",{id:"setting-up-a-full-consensus-node"},"Setting up a full consensus node"),(0,r.kt)("p",null,"The following tutorial is done on an Ubuntu Linux 20.04 (LTS) x64\ninstance machine."),(0,r.kt)("h3",{id:"setup-the-dependencies"},"Setup the dependencies"),(0,r.kt)("p",null,"Follow the instructions on installing the dependencies ",(0,r.kt)("a",{parentName:"p",href:"/nodes/environment"},"here"),"."),(0,r.kt)("h3",{id:"install-celestia-app"},"Install celestia-app"),(0,r.kt)("p",null,"Follow the tutorial on installing ",(0,r.kt)("inlineCode",{parentName:"p"},"celestia-app")," ",(0,r.kt)("a",{parentName:"p",href:"/nodes/celestia-app"},"here"),"."),(0,r.kt)("h3",{id:"setup-the-p2p-networks"},"Setup the P2P networks"),(0,r.kt)("p",null,"Now we will setup the P2P Networks by cloning the networks repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd $HOME\nrm -rf networks\ngit clone https://github.com/celestiaorg/networks.git\n")),(0,r.kt)(l.Z,{groupId:"network",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,r.kt)("p",null,'To initialize the network pick a "node-name" that describes your\nnode. The ',(0,r.kt)("inlineCode",{parentName:"p"},"--chain-id")," parameter we are using here is:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,o.Z.mochaChainId)),(0,r.kt)("p",null,"Keep in mind that this might change if a new testnet is deployed."),(0,r.kt)("pre",null,(0,r.kt)("code",null,'celestia-appd init "node-name" --chain-id ',o.Z.mochaChainId)),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"genesis.json")," file. For mocha we are using:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"cp $HOME/networks/",o.Z.mochaChainId,"/genesis.json $HOME/.celestia-app/config")),(0,r.kt)("p",null,"Set seeds and peers:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"PERSISTENT_PEERS=$(curl -sL https://raw.githubusercontent.com/celestiaorg/networks/master/",o.Z.mochaChainId,"/peers.txt | tr -d '\\n')",(0,r.kt)("br",null),"echo $PERSISTENT_PEERS",(0,r.kt)("br",null),'sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \\"$PERSISTENT_PEERS\\"/" $HOME/.celestia-app/config/config.toml',(0,r.kt)("br",null))),(0,r.kt)("p",null,"Note: You can find more peers at:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"https://github.com/celestiaorg/networks/blob/master/",o.Z.mochaChainId,"/peers.txt"))),(0,r.kt)(i.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,r.kt)("p",null,'To initialize the network pick a "node-name" that describes your\nnode. The ',(0,r.kt)("inlineCode",{parentName:"p"},"--chain-id")," parameter we are using here is:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,o.Z.arabicaChainId)),(0,r.kt)("p",null,"Keep in mind that this might change if a new testnet is deployed."),(0,r.kt)("pre",null,(0,r.kt)("code",null,'celestia-appd init "node-name" --chain-id ',o.Z.arabicaChainId)),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"genesis.json")," file. For mocha we are using:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"cp $HOME/networks/",o.Z.arabicaChainId,"/genesis.json $HOME/.celestia-app/config")),(0,r.kt)("p",null,"Set seeds and peers:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"PERSISTENT_PEERS=$(curl -sL https://raw.githubusercontent.com/celestiaorg/networks/master/",o.Z.arabicaChainId,"/peers.txt | tr -d '\\n')",(0,r.kt)("br",null),"echo $PERSISTENT_PEERS",(0,r.kt)("br",null),'sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \\"$PERSISTENT_PEERS\\"/" $HOME/.celestia-app/config/config.toml',(0,r.kt)("br",null))),(0,r.kt)("p",null,"Note: You can find more peers at:"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"https://github.com/celestiaorg/networks/blob/master/",o.Z.arabicaChainId,"/peers.txt")))),(0,r.kt)("h3",{id:"configure-pruning"},"Configure pruning"),(0,r.kt)("p",null,"For lower disk space usage we recommend setting up pruning using the\nconfigurations below. You can change this to your own pruning configurations\nif you want:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'PRUNING="custom"\nPRUNING_KEEP_RECENT="100"\nPRUNING_INTERVAL="10"\n\nsed -i -e "s/^pruning *=.*/pruning = \\"$PRUNING\\"/" $HOME/.celestia-app/config/app.toml\nsed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \\\n\\"$PRUNING_KEEP_RECENT\\"/" $HOME/.celestia-app/config/app.toml\nsed -i -e "s/^pruning-interval *=.*/pruning-interval = \\\n\\"$PRUNING_INTERVAL\\"/" $HOME/.celestia-app/config/app.toml\n')),(0,r.kt)("h3",{id:"reset-network"},"Reset network"),(0,r.kt)("p",null,"This will delete all data folders so we can start fresh:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd tendermint unsafe-reset-all --home $HOME/.celestia-app\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine.")),(0,r.kt)("h3",{id:"syncing"},"Syncing"),(0,r.kt)("p",null,"By default, a consensus node will sync using block sync; that is request, validate\nand execute every block up to the head of the blockchain. This is the most secure\nmechanism yet the slowest (taking up to days depending on the height of the blockchain)."),(0,r.kt)("p",null,"There are two alternatives for quicker syncing."),(0,r.kt)("h4",{id:"state-sync"},"State sync"),(0,r.kt)("p",null,"State sync uses light client verification to verify state snapshots from peers\nand then apply them. State sync relies on weak subjectivity; a trusted header\n(specifically the hash and height) must be provided. This can be found by querying\na trusted RPC endpoint (/block). RPC endpoints are also required for retrieving\nlight blocks. These can be found in the docs here under the respective networks or\nfrom the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cosmos/chain-registry"},"chain-registry"),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"$HOME/.celestia-app/config/config.toml"),", set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'rpc_servers = ""\ntrust_height = 0\ntrust_hash = ""\n')),(0,r.kt)("p",null,"to their respective fields. At least two different rpc endpoints should be provided.\nThe more, the greater the chance of detecting any fraudulent behavior."),(0,r.kt)("p",null,"Once setup, you should be ready to start the node as normal. In the logs, you should\nsee: ",(0,r.kt)("inlineCode",{parentName:"p"},"Discovering snapshots"),". This may take a few minutes before snapshots are found\ndepending on the network topology."),(0,r.kt)("h4",{id:"quick-sync"},"Quick sync"),(0,r.kt)("p",null,"Quick sync effectively downloads the entire ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," directory from a third-party provider\nmeaning the node has all the application and blockchain state as the node it was\ncopied from."),(0,r.kt)(l.Z,{groupId:"network",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"mocha",label:"Mocha",mdxType:"TabItem"},(0,r.kt)("p",null,"Run the following command to quick-sync from a snapshot for ",(0,r.kt)("inlineCode",{parentName:"p"},"mocha"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"cd $HOME",(0,r.kt)("br",null),"rm -rf ~/.celestia-app/data",(0,r.kt)("br",null),"mkdir -p ~/.celestia-app/data",(0,r.kt)("br",null),"SNAP_NAME=$(curl -s https://snaps.qubelabs.io/celestia/ | \\",(0,r.kt)("br",null),'egrep -o ">',o.Z.mochaChainId,'.*tar" | tr -d ">")',(0,r.kt)("br",null),"wget -O - https://snaps.qubelabs.io/celestia/${SNAP_NAME} | tar xf - \\",(0,r.kt)("br",null),"-C ~/.celestia-app/data/",(0,r.kt)("br",null)))),(0,r.kt)(i.Z,{value:"arabica",label:"Arabica",mdxType:"TabItem"},(0,r.kt)("p",null,"Run the following command to quick-sync from a snapshot for ",(0,r.kt)("inlineCode",{parentName:"p"},"arabica-10"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",null,"cd $HOME",(0,r.kt)("br",null),"rm -rf ~/.celestia-app/data",(0,r.kt)("br",null),"mkdir -p ~/.celestia-app/data",(0,r.kt)("br",null),"SNAP_NAME=$(curl -s https://snaps.qubelabs.io/celestia/ | \\",(0,r.kt)("br",null),'egrep -o ">',o.Z.arabicaChainId,'.*tar" | tr -d ">")',(0,r.kt)("br",null),"wget -O - https://snaps.qubelabs.io/celestia/${SNAP_NAME} | tar xf - \\",(0,r.kt)("br",null),"-C ~/.celestia-app/data/",(0,r.kt)("br",null))))),(0,r.kt)("h3",{id:"start-the-celestia-app"},"Start the celestia-app"),(0,r.kt)("p",null,"In order to start your full consensus node, run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd start\n")),(0,r.kt)("p",null,"Follow the tutorial on setting up Celestia App as a background process\nwith SystemD ",(0,r.kt)("a",{parentName:"p",href:"/nodes/systemd"},"here"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"../../nodes/celestia-node/#ports"},"ports")," section for information on\nwhich ports are required to be open on your machine.")),(0,r.kt)("h3",{id:"optional-configure-for-rpc-endpoint"},"Optional: configure for RPC endpoint"),(0,r.kt)("p",null,"You can configure your full consensus node to be a public RPC endpoint\nand listen to any connections from Data Availability Nodes in order to\nserve requests for the Data Availability API ",(0,r.kt)("a",{parentName:"p",href:"/developers/node-tutorial"},"here"),"."),(0,r.kt)("p",null,"Run the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'EXTERNAL_ADDRESS=$(wget -qO- eth0.me)\nsed -i.bak -e "s/^external_address = \\"\\"/external_address = \\"$EXTERNAL_ADDRESS:26656\\"/" $HOME/.celestia-app/config/config.toml\nsed -i \'s#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g\' ~/.celestia-app/config/config.toml\n')),(0,r.kt)("p",null,"Restart ",(0,r.kt)("inlineCode",{parentName:"p"},"celestia-appd")," in the previous step to load those configs."),(0,r.kt)("h2",{id:"transaction-indexer-configuration-options"},"Transaction indexer configuration options"),(0,r.kt)("p",null,"This section will show you how to set your ",(0,r.kt)("inlineCode",{parentName:"p"},"config.toml")," file in ",(0,r.kt)("inlineCode",{parentName:"p"},"celestia-app"),"\nto chose which transactions to index. In some\ncases, a node operator will be able to decide which transactions to index\nbased on configuration set in the application."),(0,r.kt)("p",null,"The options are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"null")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"kv")," (default) - the simplest possible indexer backed by key-value storage\n(defaults to levelDB; see DBBackend)",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"when ",(0,r.kt)("inlineCode",{parentName:"li"},"kv")," is chosen ",(0,r.kt)("inlineCode",{parentName:"li"},"tx.height")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"tx.hash")," will always be indexed"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"psql")," - the indexer services backed by PostgreSQL",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"when ",(0,r.kt)("inlineCode",{parentName:"li"},"kv")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"psql")," is chosen, ",(0,r.kt)("inlineCode",{parentName:"li"},"tx.height")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"tx.hash")," will always be indexed")))))}k.isMDXComponent=!0},7115:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/full-consensus-node-f7a325aeb2fdc41ffd55c1be57534fb4.png"}}]);